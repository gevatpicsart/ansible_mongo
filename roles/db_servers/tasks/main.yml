- name: CHECK if mongo already installed
  stat: path=/usr/bin/mongo
  register: mongo_bin
       
- name: INSTALL the repo key
  become: true
  ansible.builtin.apt_key:
    url: "{{ mongo_repo_key_uri }}"
    state: present
  when: mongo_bin.stat.exists == False

- name: INSTALL mongo deb repository
  tags: mongoinstall
  become: true
  ansible.builtin.apt_repository:
    repo: "{{ mongo_deb_repo_uri }}"
    update_cache: yes
    state: present
  when: mongo_bin.stat.exists == False

- name: INSTALL mongodb
  become: true
  apt: pkg=mongodb-org state=latest update_cache=yes
  when: mongo_bin.stat.exists == False

- name: COPY mongo config file
  tags: mongoconfig
  template: 
    src: mongo-config.j2
    dest: "{{ mongo_conf_path }}"

- name: COPY mongo key file
  tags: mongoconfig
  ansible.builtin.copy:
    content: "{{ mongodb_keyfile_content }}"
    dest: "{{ mongo_repl_key_path }}"
    owner: mongodb
    group: mongodb
    mode: 0400

- name: ADD a line in var.conf
  become: true
  ansible.builtin.lineinfile:
    path: "{{ mongo_deb_tmpfiles_path }}"
    state: present
    line: "{{ mongo_deb_tmpfiles_line }}"
    create: true

- name: CREATE storage directory
  tags: createpiddir
  become: true
  ansible.builtin.file:
    path: "{{ mongo_storage_path }}"
    state: directory
    owner: mongodb
    group: mongodb

- name: CHECK PID directory
  tags: createpiddir
  stat:
    path: "{{ mongo_pid_dir_path }}"
  register: pid_dir_exists

- name: CREATE PID directory
  tags: createpiddir
  become: true
  ansible.builtin.file:
    path: "{{ mongo_pid_dir_path }}"
    state: directory
    owner: mongodb
    group: mongodb
   #mode: '0644'
  when: pid_dir_exists.stat.exists == False

- name: CHECK PID file
  tags: createpidfile
  stat:
    path: "{{ mongo_pid_file_path }}"
  register: pid_file_exists

- name: CREATE PID file
  tags: createpidfile
  become: true
  ansible.builtin.file:
   path: "{{ mongo_pid_file_path }}"
   state: touch
   owner: mongodb
   group: mongodb
   #mode: '0644'
  when: pid_file_exists.stat.exists == False
   
- name: START mongodb
  tags: mongostart
  become: true
  ansible.builtin.service:
    name: mongod
    state: started

- name: CREATE replset
  tags: replinit
  community.mongodb.mongodb_replicaset:
  #CHANGE 'localhost' to a real host name/IP
    login_host: localhost
    login_port: "{{ mongo_port }}"
    login_user: "{{ mongo_admin_username }}"
    login_password: "{{ mongo_admin_pass }}"
    login_database: admin
    replica_set: "{{ mongo_repl_name }}"
    members: localhost:27017
    validate: no
### CHECK IF ADMIN USER EXISTS



- name: CREATE 'admin user' database mongod.
  tags: createroot
  community.mongodb.mongodb_user:
    database: admin
    name: "{{ mongo_admin_username }}"
    password: "{{ mongo_admin_pass }}"
    roles: "{{ mongo_admin_role }}"
    state: present
  ignore_errors: true
  register: output



### CREATING INITIAL DB
### TEMPORARILY THE PROCEDURE WILL BE VIA EVAL SHELL

- name: CHECK first DB dbExists
  community.mongodb.mongodb_shell:
    login_host: 192.168.40.223
    login_port: "{{ mongo_port }}"
    login_user: "{{ mongo_admin_username }}"
    login_password: "{{ mongo_admin_pass }}"
    eval: "db.getMongo().getDBNames().indexOf('{{ mongo_db_name }}')"
  register: dbExists

- name: CREATE first database
  community.mongodb.mongodb_shell:
    login_host: 192.168.40.223
    login_port: "{{ mongo_port }}"
    login_user: "{{ mongo_admin_username }}"
    login_password: "{{ mongo_admin_pass }}"
    eval: "db.getSiblingDB('{{ mongo_db_name }}').createCollection('{{ mongo_dummy_collection_name }}')"
  when: dbExists != -1
    #eval: "db.adminCommand('listDatabases')"

### CREATE USERS FOR SPECIFIC (basically the "mongo_db_name" ) FROM 
###eval: "if(db.getUser('testuser') == null) { db.createUser({ user: 'testuser', pwd: 'testpass', roles: [ 'readWrite' ]});}"
- name: CREATE initial DB
  community.mongodb.mongodb_shell:
    eval: 'db.getSiblingDB("admin").runCommand(if(db.getUser("testuser") == null) { db.createUser({ user: "testuser", pwd: "testpass", roles: [ "readWrite" ]});})'



#- name: CREATE initial DB
      #action: apt update_cache=yes pkg={{item}} state=installed
     # with_items:
      #  - mongodb

   # - service: name=mongodb state=started
#    - shell: mongo mydb --eval "db.createCollection('mycollection')"
#--eval="db.getSiblingDB('ankap').createCollection('dardag')"


- name: RESTART mongodb
  service: 
    name: mongod
    state: restarted
